{
  "version": 3,
  "sources": ["../bundle-oeo0yC/checked-fetch.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-oeo0yC/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-oeo0yC/middleware-loader.entry.ts"],
  "sourceRoot": "D:\\Projects\\Cloud Computing\\Serverless-URL-shortner\\url-shortener-worker\\.wrangler\\tmp\\dev-7n5gJv",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Using Cloudflare KV for persistent URL mappings\r\n// Bind a KV namespace named `URLS` in wrangler.toml\r\n\r\n// Base62 characters for short code generation\r\nconst BASE62_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n\r\n// Local fallback store for dev if KV binding isn't available\r\nconst localDB = new Map();\r\n\r\nasync function kvGet(env, key) {\r\n  if (env && env.URLS) {\r\n    return await env.URLS.get(key);\r\n  }\r\n  const val = localDB.get(key);\r\n  return val ? JSON.stringify(val) : null;\r\n}\r\n\r\nasync function kvPut(env, key, value) {\r\n  if (env && env.URLS) {\r\n    return await env.URLS.put(key, value);\r\n  }\r\n  try {\r\n    localDB.set(key, JSON.parse(value));\r\n  } catch {\r\n    // ignore parse errors in fallback\r\n  }\r\n}\r\n\r\n/**\r\n * Generate a random 6-character Base62 string\r\n */\r\nfunction generateShortCode() {\r\n  let result = '';\r\n  for (let i = 0; i < 6; i++) {\r\n    result += BASE62_CHARS.charAt(Math.floor(Math.random() * BASE62_CHARS.length));\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Validate if a URL is properly formatted\r\n */\r\nfunction isValidUrl(string) {\r\n  try {\r\n    const url = new URL(string);\r\n    return url.protocol === 'http:' || url.protocol === 'https:';\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Handle CORS preflight requests\r\n */\r\nfunction handleCORS() {\r\n  return new Response(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type',\r\n      'Access-Control-Max-Age': '86400',\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Add CORS headers to response\r\n */\r\nfunction addCORSHeaders(response) {\r\n  response.headers.set('Access-Control-Allow-Origin', '*');\r\n  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\r\n  response.headers.set('Access-Control-Allow-Headers', 'Content-Type');\r\n  return response;\r\n}\r\n\r\n/**\r\n * Handle POST /shorten - Create a short URL\r\n */\r\nasync function handleShortenRequest(request, env) {\r\n  try {\r\n    // Parse body robustly: read raw text once, then JSON.parse\r\n    const raw = await request.text();\r\n    console.log('Raw body received:', raw);\r\n    let body = null;\r\n    if (raw && raw.length) {\r\n      try {\r\n        body = JSON.parse(raw);\r\n        console.log('Parsed body:', body);\r\n      } catch (e) {\r\n        console.error('JSON parse error:', e.message);\r\n        body = null;\r\n      }\r\n    }\r\n    \r\n    if (!body || !body.url) {\r\n      console.log('Body validation failed. body:', body);\r\n      return addCORSHeaders(new Response(\r\n        JSON.stringify({ error: 'URL is required' }), \r\n        { \r\n          status: 400, \r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      ));\r\n    }\r\n\r\n    const originalUrl = body.url.trim();\r\n    console.log('Original URL after trim:', originalUrl);\r\n    \r\n    if (!isValidUrl(originalUrl)) {\r\n      console.log('URL validation failed for:', originalUrl);\r\n      return addCORSHeaders(new Response(\r\n        JSON.stringify({ error: 'Invalid URL format' }), \r\n        { \r\n          status: 400, \r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      ));\r\n    }\r\n    \r\n    console.log('URL validation passed, generating short code...');\r\n\r\n    // Generate unique short code (ensure uniqueness in KV)\r\n    let shortCode;\r\n    let attempts = 0;\r\n    do {\r\n      shortCode = generateShortCode();\r\n      attempts++;\r\n    } while ((await kvGet(env, shortCode)) && attempts < 10);\r\n\r\n    if (attempts >= 10) {\r\n      console.error('Failed to generate unique code after 10 attempts');\r\n      return addCORSHeaders(new Response(\r\n        JSON.stringify({ error: 'Failed to generate unique code' }), \r\n        { \r\n          status: 500, \r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      ));\r\n    }\r\n\r\n    console.log('Generated short code:', shortCode);\r\n\r\n    // Store the mapping in KV\r\n    const record = {\r\n      url: originalUrl,\r\n      createdAt: new Date().toISOString(),\r\n      clicks: 0\r\n    };\r\n  await kvPut(env, shortCode, JSON.stringify(record));\r\n    console.log('Stored in KV successfully');\r\n\r\n    // Create the short URL\r\n  const shortUrl = `${new URL(request.url).origin}/${shortCode}`;\r\n\r\n    return addCORSHeaders(new Response(\r\n      JSON.stringify({ \r\n        shortUrl: shortUrl,\r\n        shortCode: shortCode,\r\n        originalUrl: originalUrl\r\n      }), \r\n      { \r\n        status: 200, \r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    ));\r\n\r\n  } catch (error) {\r\n    // Surface a clearer parsing error while keeping CORS headers\r\n    console.error('Caught error in handleShortenRequest:', error.message, error.stack);\r\n    return addCORSHeaders(new Response(\r\n      JSON.stringify({ error: 'Invalid JSON body' }), \r\n      { \r\n        status: 400, \r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    ));\r\n  }\r\n}\r\n\r\n/**\r\n * Handle GET /:code - Redirect to original URL\r\n */\r\nasync function handleRedirectRequest(shortCode, env) {\r\n  const raw = await kvGet(env, shortCode);\r\n  if (!raw) {\r\n    return addCORSHeaders(new Response(\r\n      JSON.stringify({ error: 'Short URL not found' }), \r\n      { \r\n        status: 404, \r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    ));\r\n  }\r\n\r\n  const urlData = JSON.parse(raw);\r\n  // Increment click counter and update last access\r\n  urlData.clicks = (urlData.clicks || 0) + 1;\r\n  urlData.lastAccessed = new Date().toISOString();\r\n  await kvPut(env, shortCode, JSON.stringify(urlData));\r\n\r\n  // Redirect to original URL\r\n  return Response.redirect(urlData.url, 302);\r\n}\r\n\r\n/**\r\n * Handle GET /stats/:code - Get URL statistics (bonus feature)\r\n */\r\nasync function handleStatsRequest(shortCode, env) {\r\n  const raw = await kvGet(env, shortCode);\r\n  if (!raw) {\r\n    return addCORSHeaders(new Response(\r\n      JSON.stringify({ error: 'Short URL not found' }), \r\n      { \r\n        status: 404, \r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    ));\r\n  }\r\n\r\n  const urlData = JSON.parse(raw);\r\n  return addCORSHeaders(new Response(\r\n    JSON.stringify({\r\n      shortCode: shortCode,\r\n      originalUrl: urlData.url,\r\n      clicks: urlData.clicks || 0,\r\n      createdAt: urlData.createdAt,\r\n      lastAccessed: urlData.lastAccessed || null\r\n    }), \r\n    { \r\n      status: 200, \r\n      headers: { 'Content-Type': 'application/json' }\r\n    }\r\n  ));\r\n}\r\n\r\n/**\r\n * Main request handler\r\n */\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    try {\r\n      console.log('Env bindings available:', Object.keys(env || {}));\r\n    } catch (e) {\r\n      // ignore logging errors\r\n    }\r\n    const url = new URL(request.url);\r\n    const method = request.method;\r\n    const pathname = url.pathname;\r\n\r\n    // Handle CORS preflight requests\r\n    if (method === 'OPTIONS') {\r\n      return handleCORS();\r\n    }\r\n\r\n    // Route: POST /shorten\r\n    if (method === 'POST' && pathname === '/shorten') {\r\n      return handleShortenRequest(request, env);\r\n    }\r\n\r\n    // Route: GET /stats/:code (bonus feature)\r\n    if (method === 'GET' && pathname.startsWith('/stats/')) {\r\n      const shortCode = pathname.substring(7); // Remove '/stats/'\r\n      return handleStatsRequest(shortCode, env);\r\n    }\r\n\r\n    // Route: GET /:code (redirect)\r\n    if (method === 'GET' && pathname.length > 1) {\r\n      const shortCode = pathname.substring(1); // Remove leading '/'\r\n      \r\n      // Basic validation for short code format\r\n      if (/^[0-9A-Za-z]{6}$/.test(shortCode)) {\r\n        return handleRedirectRequest(shortCode, env);\r\n      }\r\n    }\r\n\r\n    // Route: GET / (root) - Show API documentation\r\n    if (method === 'GET' && pathname === '/') {\r\n      const html = `\r\n        <!DOCTYPE html>\r\n        <html>\r\n        <head>\r\n          <title>URL Shortener API</title>\r\n          <style>\r\n            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; line-height: 1.6; }\r\n            code { background: #f4f4f4; padding: 2px 5px; border-radius: 3px; }\r\n            pre { background: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }\r\n            .endpoint { margin: 20px 0; padding: 15px; border-left: 4px solid #007acc; background: #f8f9fa; }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <h1>\uD83D\uDD17 URL Shortener API</h1>\r\n          <p>A simple URL shortener service built with Cloudflare Workers.</p>\r\n          \r\n          <div class=\"endpoint\">\r\n            <h3>POST /shorten</h3>\r\n            <p>Create a short URL from a long URL.</p>\r\n            <pre>\r\ncurl -X POST ${url.origin}/shorten \\\\\r\n  -H \"Content-Type: application/json\" \\\\\r\n  -d '{\"url\": \"https://example.com/very/long/url\"}'\r\n            </pre>\r\n            <p><strong>Response:</strong></p>\r\n            <pre>{\"shortUrl\": \"${url.origin}/abc123\", \"shortCode\": \"abc123\", \"originalUrl\": \"https://example.com/very/long/url\"}</pre>\r\n          </div>\r\n\r\n          <div class=\"endpoint\">\r\n            <h3>GET /:code</h3>\r\n            <p>Redirect to the original URL using the short code.</p>\r\n            <pre>curl -L ${url.origin}/abc123</pre>\r\n            <p>Returns a 302 redirect to the original URL.</p>\r\n          </div>\r\n\r\n          <div class=\"endpoint\">\r\n            <h3>GET /stats/:code</h3>\r\n            <p>Get statistics for a short URL.</p>\r\n            <pre>curl ${url.origin}/stats/abc123</pre>\r\n            <p><strong>Response:</strong></p>\r\n            <pre>{\"shortCode\": \"abc123\", \"originalUrl\": \"https://example.com/very/long/url\", \"clicks\": 5, \"createdAt\": \"2024-01-01T12:00:00.000Z\"}</pre>\r\n          </div>\r\n\r\n          \r\n        </body>\r\n        </html>\r\n      `;\r\n      \r\n      return new Response(html, {\r\n        headers: { 'Content-Type': 'text/html' }\r\n      });\r\n    }\r\n\r\n    // Default 404 response\r\n    return addCORSHeaders(new Response(\r\n      JSON.stringify({ error: 'Not found' }), \r\n      { \r\n        status: 404, \r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    ));\r\n  },\r\n};\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"D:\\\\Projects\\\\Cloud Computing\\\\Serverless-URL-shortner\\\\url-shortener-worker\\\\src\\\\index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"D:\\\\Projects\\\\Cloud Computing\\\\Serverless-URL-shortner\\\\url-shortener-worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"D:\\\\Projects\\\\Cloud Computing\\\\Serverless-URL-shortner\\\\url-shortener-worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"D:\\\\Projects\\\\Cloud Computing\\\\Serverless-URL-shortner\\\\url-shortener-worker\\\\src\\\\index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"D:\\\\Projects\\\\Cloud Computing\\\\Serverless-URL-shortner\\\\url-shortener-worker\\\\.wrangler\\\\tmp\\\\bundle-oeo0yC\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"D:\\\\Projects\\\\Cloud Computing\\\\Serverless-URL-shortner\\\\url-shortener-worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"D:\\\\Projects\\\\Cloud Computing\\\\Serverless-URL-shortner\\\\url-shortener-worker\\\\.wrangler\\\\tmp\\\\bundle-oeo0yC\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"D:\\\\Projects\\\\Cloud Computing\\\\Serverless-URL-shortner\\\\url-shortener-worker\\\\.wrangler\\\\tmp\\\\bundle-oeo0yC\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
